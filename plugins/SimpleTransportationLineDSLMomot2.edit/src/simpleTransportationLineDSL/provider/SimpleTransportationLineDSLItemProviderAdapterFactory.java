/**
 */
package simpleTransportationLineDSL.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import simpleTransportationLineDSL.util.SimpleTransportationLineDSLAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleTransportationLineDSLItemProviderAdapterFactory extends SimpleTransportationLineDSLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimpleTransportationLineDSLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.Area} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AreaItemProvider areaItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.Area}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAreaAdapter() {
		if (areaItemProvider == null) {
			areaItemProvider = new AreaItemProvider(this);
		}

		return areaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.SimConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimConfigItemProvider simConfigItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.SimConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimConfigAdapter() {
		if (simConfigItemProvider == null) {
			simConfigItemProvider = new SimConfigItemProvider(this);
		}

		return simConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.SentStore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SentStoreItemProvider sentStoreItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.SentStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSentStoreAdapter() {
		if (sentStoreItemProvider == null) {
			sentStoreItemProvider = new SentStoreItemProvider(this);
		}

		return sentStoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.ItemGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemGeneratorItemProvider itemGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.ItemGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemGeneratorAdapter() {
		if (itemGeneratorItemProvider == null) {
			itemGeneratorItemProvider = new ItemGeneratorItemProvider(this);
		}

		return itemGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.Conveyor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorItemProvider conveyorItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.Conveyor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorAdapter() {
		if (conveyorItemProvider == null) {
			conveyorItemProvider = new ConveyorItemProvider(this);
		}

		return conveyorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.Item} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemItemProvider itemItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.Item}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemAdapter() {
		if (itemItemProvider == null) {
			itemItemProvider = new ItemItemProvider(this);
		}

		return itemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.TurnTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnTableItemProvider turnTableItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.TurnTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnTableAdapter() {
		if (turnTableItemProvider == null) {
			turnTableItemProvider = new TurnTableItemProvider(this);
		}

		return turnTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.OutputSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputSlotItemProvider outputSlotItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.OutputSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputSlotAdapter() {
		if (outputSlotItemProvider == null) {
			outputSlotItemProvider = new OutputSlotItemProvider(this);
		}

		return outputSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.InputSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputSlotItemProvider inputSlotItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.InputSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputSlotAdapter() {
		if (inputSlotItemProvider == null) {
			inputSlotItemProvider = new InputSlotItemProvider(this);
		}

		return inputSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.Machine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineItemProvider machineItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.Machine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineAdapter() {
		if (machineItemProvider == null) {
			machineItemProvider = new MachineItemProvider(this);
		}

		return machineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.ItemInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemInfoItemProvider itemInfoItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.ItemInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemInfoAdapter() {
		if (itemInfoItemProvider == null) {
			itemInfoItemProvider = new ItemInfoItemProvider(this);
		}

		return itemInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.ComponentInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentInfoItemProvider componentInfoItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.ComponentInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentInfoAdapter() {
		if (componentInfoItemProvider == null) {
			componentInfoItemProvider = new ComponentInfoItemProvider(this);
		}

		return componentInfoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.WasteStore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WasteStoreItemProvider wasteStoreItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.WasteStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWasteStoreAdapter() {
		if (wasteStoreItemProvider == null) {
			wasteStoreItemProvider = new WasteStoreItemProvider(this);
		}

		return wasteStoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link simpleTransportationLineDSL.NormalStore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalStoreItemProvider normalStoreItemProvider;

	/**
	 * This creates an adapter for a {@link simpleTransportationLineDSL.NormalStore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalStoreAdapter() {
		if (normalStoreItemProvider == null) {
			normalStoreItemProvider = new NormalStoreItemProvider(this);
		}

		return normalStoreItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (areaItemProvider != null) areaItemProvider.dispose();
		if (simConfigItemProvider != null) simConfigItemProvider.dispose();
		if (sentStoreItemProvider != null) sentStoreItemProvider.dispose();
		if (itemGeneratorItemProvider != null) itemGeneratorItemProvider.dispose();
		if (conveyorItemProvider != null) conveyorItemProvider.dispose();
		if (itemItemProvider != null) itemItemProvider.dispose();
		if (turnTableItemProvider != null) turnTableItemProvider.dispose();
		if (outputSlotItemProvider != null) outputSlotItemProvider.dispose();
		if (inputSlotItemProvider != null) inputSlotItemProvider.dispose();
		if (machineItemProvider != null) machineItemProvider.dispose();
		if (itemInfoItemProvider != null) itemInfoItemProvider.dispose();
		if (componentInfoItemProvider != null) componentInfoItemProvider.dispose();
		if (wasteStoreItemProvider != null) wasteStoreItemProvider.dispose();
		if (normalStoreItemProvider != null) normalStoreItemProvider.dispose();
	}

}
